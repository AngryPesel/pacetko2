import random
import json
import os
import time
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TOKEN = os.getenv("BOT_TOKEN")
DATA_FILE = "pacetko_data.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üê∑ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ —É —Å–≤—ñ—Ç –ü.–ê.–¶.–Ñ.–¢.–ö.–û. 2!\n"
        "–¢—É—Ç —Ç–∏ –∑–º–æ–∂–µ—à –≤–∏—Ä–æ—â—É–≤–∞—Ç–∏ —Å–≤–æ—é –ø–∞—Ü—î—Ç–∫—É, "
        "–≥–æ–¥—É–≤–∞—Ç–∏ —ó—ó —á—ñ–∫—ñ-–±—Ä—ñ–∫–∞–º–∏, –∑–∞–ø–∏–≤–∞—Ç–∏ –≥–æ—Ä—ñ–ª–∫–æ—é –∑ –∫–æ–≤–±–∞—Å–æ—é —ñ –±–∞—Ç–æ–Ω–æ–º.\n"
        "–ê–ª–µ –ø–æ—á–Ω–µ–º–æ –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ ‚Äî –¥–æ–≥–ª—è–¥—É –∑–∞ —Å–≤–æ—î—é –ø–∞—Ü—î—Ç–∫–æ—é!"
    )
    await update.message.reply_text(text)

# /feed
async def feed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    chat_id = str(update.effective_chat.id)

    if chat_id not in data:
        data[chat_id] = {}

    if user_id not in data[chat_id]:
        data[chat_id][user_id] = {
            "name": f"–ü–∞—Ü—î—Ç–∫–æ_{user_id[-4:]}",  # –¥–µ—Ñ–æ–ª—Ç–Ω–µ —ñ–º'—è
            "weight": 10,
            "last_feed": 0
        }

    pig = data[chat_id][user_id]
    now = time.time()

    if now - pig["last_feed"] < 12 * 3600:
        remaining = int((12 * 3600 - (now - pig["last_feed"])) / 3600)
        await update.message.reply_text(
            f"‚è≥ –¢–≤–æ—è –ø–∞—Ü—î—Ç–∫–∞ –≤–∂–µ —Å–∏—Ç–µ–Ω—å–∫–∞. –ü–æ—á–µ–∫–∞–π —â–µ {remaining} –≥–æ–¥."
        )
        return

    change = random.randint(-40, 40)
    pig["weight"] = max(1, pig["weight"] + change)
    pig["last_feed"] = now

    if change > 0:
        await update.message.reply_text(
            f"üçû –¢–∏ –ø–æ–∫–æ—Ä–º–∏–≤ {pig['name']}! –í–æ–Ω–∞ –ø–æ–≥–ª–∞–¥—à–∞–ª–∞ –Ω–∞ {change} –∫–≥.\n"
            f"–¢–µ–ø–µ—Ä –≤–∞–≥–∞: {pig['weight']} –∫–≥."
        )
    elif change < 0:
        await update.message.reply_text(
            f"ü•ì {pig['name']} —â–æ—Å—å –Ω–µ –¥—É–∂–µ –∑–∞—Å–≤–æ—ó–ª–∞ —ó–∂—É —ñ —Å—Ö—É–¥–ª–∞ –Ω–∞ {-change} –∫–≥.\n"
            f"–¢–µ–ø–µ—Ä –≤–∞–≥–∞: {pig['weight']} –∫–≥."
        )
    else:
        await update.message.reply_text(
            f"ü§∑‚Äç‚ôÇÔ∏è {pig['name']} –ø–æ—ó–ª–∞, –∞–ª–µ –≤–∞–≥–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—è.\n"
            f"–í–∞–≥–∞: {pig['weight']} –∫–≥."
        )

    save_data(data)

# /name
async def name_pig(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    chat_id = str(update.effective_chat.id)

    if len(context.args) == 0:
        await update.message.reply_text("‚ùå –ù–∞–ø–∏—à–∏ —ñ–º'—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏. –ü—Ä–∏–∫–ª–∞–¥: /name –•—Ä—é–Ω—è")
        return

    new_name = " ".join(context.args)

    if chat_id not in data:
        data[chat_id] = {}
    if user_id not in data[chat_id]:
        data[chat_id][user_id] = {"name": new_name, "weight": 10, "last_feed": 0}

    data[chat_id][user_id]["name"] = new_name
    save_data(data)

    await update.message.reply_text(f"‚úÖ –¢–≤–æ—è –ø–∞—Ü—î—Ç–∫–∞ —Ç–µ–ø–µ—Ä –∑–≤–µ—Ç—å—Å—è: {new_name}")

# /top
async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)

    if chat_id not in data or not data[chat_id]:
        await update.message.reply_text("‚ùå –£ —Ü—å–æ–º—É —á–∞—Ç—ñ —â–µ –Ω–µ–º–∞—î –ø–∞—Ü—î—Ç–æ–∫.")
        return

    sorted_pigs = sorted(data[chat_id].values(), key=lambda x: x["weight"], reverse=True)
    top_list = sorted_pigs[:10]

    text = "üèÜ –¢–æ–ø 10 –ø–∞—Ü—î—Ç–æ–∫ —á–∞—Ç—É:\n"
    for i, pig in enumerate(top_list, 1):
        text += f"{i}. {pig['name']} ‚Äî {pig['weight']} –∫–≥\n"

    await update.message.reply_text(text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("feed", feed))
app.add_handler(CommandHandler("name", name_pig))
app.add_handler(CommandHandler("top", top))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
app.run_polling()