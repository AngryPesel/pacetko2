import random
import json
import os
import time
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN = os.getenv("BOT_TOKEN")
DATA_FILE = "pacetko_data.json"

# --- –°–¢–ê–õ–ö–ï–†–°–¨–ö–Ü –§–†–ê–ó–ò ---
FEED_PHRASES_GAIN = [
    "–ß—ñ–∫—ñ-–±—Ä–∏–∫–∏ ‚Äî —ñ –≤ –¥–∞–º–∫–∏! {name} —Ç–µ–ø–µ—Ä –Ω–∞ {change} –∫–≥ —Ç–æ–≤—Å—Ç—ñ—à–µ.",
    "–ì–æ—Ä—ñ–ª–∫–∞ –∑ –∫–æ–≤–±–∞—Å–æ—é –∑–∞–π—à–ª–∞ –¥–æ–±—Ä–µ. {name} +{change} –∫–≥.",
    "–ù—É —à–æ, –º—É–∂–∏–∫, {name} —Å—å–æ–≥–æ–¥–Ω—ñ –¥–æ–±—Ä–µ –ø—ñ–¥'—ó–≤ (+{change} –∫–≥).",
    "–ü–∞—Ü—î—Ç–∫–æ –≤—ñ–¥ —â–∞—Å—Ç—è –∞–∂ –ø–æ—Ö—Ä—é–∫—É—î (+{change} –∫–≥)."
]
FEED_PHRASES_LOSS = [
    "–û–π, –∞–Ω–æ–º–∞–ª—ñ—è —Å–∞–ª—å—Ü–µ –≤–∏—Å–º–æ–∫—Ç–∞–ª–∞... {name} -{loss} –∫–≥.",
    "{name} –ø–æ–≥–ª—è–Ω—É–≤ –Ω–∞ –∫–∞–±–∞–Ω–∞... —ñ —Å—Ö—É–¥ –Ω–∞ {loss} –∫–≥.",
    "–©–æ—Å—å –Ω–µ —Ç–µ –∑ —á—ñ–∫—ñ-–±—Ä–∏–∫—ñ... {name} -{loss} –∫–≥."
]
FEED_PHRASES_ZERO = [
    "{name} –ø–æ—ó–≤, –∞–ª–µ –≤–∞–≥–∞ —Å—Ç–æ—ó—Ç—å. –î–∏–≤–∏–Ω–∞!",
    "–ù—ñ —Ç—É–¥–∏, –Ω—ñ —Å—é–¥–∏... {name} –Ω–µ –∑–º—ñ–Ω–∏–≤ –≤–∞–≥—É."
]

PET_PHRASES = [
    "–û–æ–æ, {name} –∞–∂ –ø—Ä–∏—â—É–ª–∏–≤—Å—è –≤—ñ–¥ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è!",
    "{name} —Ç–∏—Ö–µ–Ω—å–∫–æ –ø–æ—Ö—Ä—é–∫—É—î ‚Äî –π–æ–º—É –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è!",
    "–¢–µ–ø–µ—Ä {name} –ª—é–±–∏—Ç—å —Ç–µ–±–µ —â–µ –±—ñ–ª—å—à–µ.",
    "–ê—Ö —Ç–∏ –∂ –ø—É—Å—Ç—É–Ω, —á—É—Ö–∞—î—à {name} –∑–∞ –≤—É—à–∫–æ–º!"
]

REPLY_PHRASES = [
    "–ß—ñ–∫—ñ-–±—Ä–∏–∫–∏ ‚Äî —ñ –≤ –¥–∞–º–∫–∏!",
    "–ú—É–∂–∏–∫, –≤ —Ç–µ–±–µ —î –±–∞—Ç–æ–Ω?",
    "–ê–Ω–æ–º–∞–ª—ñ—è —Ç—É—Ç, –±—É–¥—å –æ–±–µ—Ä–µ–∂–Ω–∏–π...",
    "–•—Ä—é-—Ö—Ä—é, —Å—Ç–∞–ª–∫–µ—Ä!",
    "–ì–æ—Ä—ñ–ª–∫–∞ –∑ –∫–æ–≤–±–∞—Å–æ—é ‚Äî –º–æ—î –ø–∞–ª–∏–≤–æ!",
    "–ü–∞—Ü—î—Ç–∫–æ –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø—Ä–∏–≥–æ–¥."
]

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è / –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# --- –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
def get_or_create_pig(chat_id, user_id):
    if chat_id not in data:
        data[chat_id] = {}
    if user_id not in data[chat_id]:
        data[chat_id][user_id] = {
            "name": f"–ü–∞—Ü—î—Ç–∫–æ_{user_id[-4:]}",
            "weight": 10,
            "last_feed": 0
        }
    return data[chat_id][user_id]

# --- –ö–æ–º–∞–Ω–¥–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üê∑ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ —É —Å–≤—ñ—Ç –ü.–ê.–¶.–Ñ.–¢.–ö.–û. 2!\n"
        "–í–∏—Ä–æ—â—É–π —Å–≤–æ—é –ø–∞—Ü—î—Ç–∫—É, –≥–æ–¥—É–π —ó—ó —á—ñ–∫—ñ-–±—Ä–∏–∫—ñ —Ç–∞ –±–µ—Ä–µ–∂–∏ –≤—ñ–¥ –∞–Ω–æ–º–∞–ª—ñ–π."
    )
    await update.message.reply_text(text)

async def feed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    chat_id = str(update.effective_chat.id)

    pig = get_or_create_pig(chat_id, user_id)
    now = time.time()

    if now - pig["last_feed"] < 12 * 3600:
        remaining = int((12 * 3600 - (now - pig["last_feed"])) / 3600)
        await update.message.reply_text(f"‚è≥ {pig['name']} —â–µ –ø–µ—Ä–µ–≤–∞—Ä—é—î. –ß–µ–∫–∞–π {remaining} –≥–æ–¥.")
        return

    change = random.randint(-40, 40)
    pig["weight"] = max(1, pig["weight"] + change)
    pig["last_feed"] = now

    if change > 0:
        msg = random.choice(FEED_PHRASES_GAIN).format(name=pig['name'], change=change)
    elif change < 0:
        msg = random.choice(FEED_PHRASES_LOSS).format(name=pig['name'], loss=-change)
    else:
        msg = random.choice(FEED_PHRASES_ZERO).format(name=pig['name'])

    await update.message.reply_text(msg + f"\n–í–∞–≥–∞: {pig['weight']} –∫–≥.")
    save_data(data)

async def name_pig(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    chat_id = str(update.effective_chat.id)

    if not context.args:
        await update.message.reply_text("‚ùå –ù–∞–ø–∏—à–∏ —ñ–º'—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏. –ü—Ä–∏–∫–ª–∞–¥: /name –•—Ä—é–Ω—è")
        return

    new_name = " ".join(context.args)
    pig = get_or_create_pig(chat_id, user_id)
    pig["name"] = new_name
    save_data(data)

    await update.message.reply_text(f"‚úÖ –¢–≤–æ—è –ø–∞—Ü—î—Ç–∫–∞ —Ç–µ–ø–µ—Ä –∑–≤–µ—Ç—å—Å—è: {new_name}")

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)

    if chat_id not in data or not data[chat_id]:
        await update.message.reply_text("‚ùå –£ —Ü—å–æ–º—É —á–∞—Ç—ñ —â–µ –Ω–µ–º–∞—î –ø–∞—Ü—î—Ç–æ–∫.")
        return

    sorted_pigs = sorted(data[chat_id].values(), key=lambda x: x["weight"], reverse=True)
    top_list = sorted_pigs[:10]

    text = "üèÜ –¢–æ–ø 10 –ø–∞—Ü—î—Ç–æ–∫ —á–∞—Ç—É:\n"
    for i, pig in enumerate(top_list, 1):
        text += f"{i}. {pig['name']} ‚Äî {pig['weight']} –∫–≥\n"

    await update.message.reply_text(text)

async def pet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    chat_id = str(update.effective_chat.id)

    pig = get_or_create_pig(chat_id, user_id)
    msg = random.choice(PET_PHRASES).format(name=pig['name'])

    # 5% —à–∞–Ω—Å –Ω–∞ –±–æ–Ω—É—Å–Ω—É –≤–∞–≥—É
    if random.random() <= 0.05:
        gain = random.randint(1, 3)
        pig["weight"] += gain
        msg += f"\nüéâ {pig['name']} –Ω–∞–±—Ä–∞–≤ {gain} –∫–≥ —Å–∞–ª—å—Ü—è!"
        save_data(data)

    await update.message.reply_text(msg)

# --- –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≥–∞–¥–∫–∏ ---
async def reply_mentions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "–ø–∞—Ü—î—Ç–∫–æ" in text or "pacetko" in text:
        await update.message.reply_text(random.choice(REPLY_PHRASES))
    
# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("feed", feed))
app.add_handler(CommandHandler("name", name_pig))
app.add_handler(CommandHandler("top", top))
app.add_handler(CommandHandler("pet", pet))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply_mentions))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")

app.run_polling()

